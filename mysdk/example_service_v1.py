# coding: utf-8

# (C) Copyright IBM Corp. 2019.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
No description provided (generated by Openapi Generator
https://github.com/openapitools/openapi-generator)
"""

import json
from .common import get_sdk_headers
from ibm_cloud_sdk_core import BaseService
from ibm_cloud_sdk_core import read_external_sources

##############################################################################
# Service
##############################################################################

class ExampleServiceV1(BaseService):
    """The ExampleService V1 service."""

    default_service_url = 'http://cloud.ibm.com/mysdk/v1'

    def __init__(self,
                 authenticator=None,
                ):
        """
        Construct a new client for the ExampleService service.

        :param Authenticator authenticator: The authenticator specifies the authentication mechanism.
               Get up to date information from https://github.com/IBM/python-sdk-core/blob/master/README.md
               about initializing the authenticator of your choice.
        """

        service_url = self.default_service_url
        disable_ssl_verification = False

        config = read_external_sources('example_service')
        if config.get('URL'):
            service_url = config.get('URL')
        if config.get('DISABLE_SSL'):
            disable_ssl_verification = config.get('DISABLE_SSL')

        BaseService.__init__(self,
            service_url=service_url,
            authenticator=authenticator,
            disable_ssl_verification=disable_ssl_verification)

    #########################
    # resources
    #########################



    def list_resources(self, *, limit=None, **kwargs):
        """
        List all resources.

        :param int limit: (optional) How many items to return at one time (max
               100).
        :param dict headers: A `dict` containing the request headers
        :return: A `DetailedResponse` containing the result, headers and HTTP status code.
        :rtype: DetailedResponse
        """


        headers = {
        }
        if 'headers' in kwargs:
            headers.update(kwargs.get('headers'))
        sdk_headers = get_sdk_headers('example_service', 'V1', 'list_resources')
        headers.update(sdk_headers)

        params = {
            'limit': limit
        }

        url = '/resources'
        request = self.prepare_request(method='GET',
                                url=url,
                                headers=headers,
                                params=params,
                                accept_json=True)
        response = self.send(request)
        return response


    def create_resource(self, resource_id, name, *, tag=None, **kwargs):
        """
        Create a resource.

        :param int resource_id: The id of the resource.
        :param str name: The name of the resource.
        :param str tag: (optional) A tag value for the resource.
        :param dict headers: A `dict` containing the request headers
        :return: A `DetailedResponse` containing the result, headers and HTTP status code.
        :rtype: DetailedResponse
        """


        headers = {
        }
        if 'headers' in kwargs:
            headers.update(kwargs.get('headers'))
        sdk_headers = get_sdk_headers('example_service', 'V1', 'create_resource')
        headers.update(sdk_headers)

        data = {
            'resource_id': resource_id,
            'name': name,
            'tag': tag
        }

        url = '/resources'
        request = self.prepare_request(method='POST',
                                url=url,
                                headers=headers,
                                data=data,
                                accept_json=True)
        response = self.send(request)
        return response


    def get_resource(self, resource_id, **kwargs):
        """
        Info for a specific resource.

        :param str resource_id: The id of the resource to retrieve.
        :param dict headers: A `dict` containing the request headers
        :return: A `DetailedResponse` containing the result, headers and HTTP status code.
        :rtype: DetailedResponse
        """

        if resource_id is None:
            raise ValueError('resource_id must be provided')

        headers = {
        }
        if 'headers' in kwargs:
            headers.update(kwargs.get('headers'))
        sdk_headers = get_sdk_headers('example_service', 'V1', 'get_resource')
        headers.update(sdk_headers)

        url = '/resources/{0}'.format(*self._encode_path_vars(resource_id))
        request = self.prepare_request(method='GET',
                                url=url,
                                headers=headers,
                                accept_json=True)
        response = self.send(request)
        return response


##############################################################################
# Models
##############################################################################


class Resource():
    """
    A resource.

    :attr int resource_id: The id of the resource.
    :attr str name: The name of the resource.
    :attr str tag: (optional) A tag value for the resource.
    """

    def __init__(self, resource_id, name, *, tag=None):
        """
        Initialize a Resource object.

        :param int resource_id: The id of the resource.
        :param str name: The name of the resource.
        :param str tag: (optional) A tag value for the resource.
        """
        self.resource_id = resource_id
        self.name = name
        self.tag = tag

    @classmethod
    def _from_dict(cls, _dict):
        """Initialize a Resource object from a json dictionary."""
        args = {}
        valid_keys = ['resource_id', 'name', 'tag']
        bad_keys = set(_dict.keys()) - set(valid_keys)
        if bad_keys:
            raise ValueError('Unrecognized keys detected in dictionary for class Resource: ' + ', '.join(bad_keys))
        if 'resource_id' in _dict:
            args['resource_id'] = _dict.get('resource_id')
        else:
            raise ValueError('Required property \'resource_id\' not present in Resource JSON')
        if 'name' in _dict:
            args['name'] = _dict.get('name')
        else:
            raise ValueError('Required property \'name\' not present in Resource JSON')
        if 'tag' in _dict:
            args['tag'] = _dict.get('tag')
        return cls(**args)

    def _to_dict(self):
        """Return a json dictionary representing this model."""
        _dict = {}
        if hasattr(self, 'resource_id') and self.resource_id is not None:
            _dict['resource_id'] = self.resource_id
        if hasattr(self, 'name') and self.name is not None:
            _dict['name'] = self.name
        if hasattr(self, 'tag') and self.tag is not None:
            _dict['tag'] = self.tag
        return _dict

    def __str__(self):
        """Return a `str` version of this Resource object."""
        return json.dumps(self._to_dict(), indent=2)

    def __eq__(self, other):
        """Return `true` when self and other are equal, false otherwise."""
        if not isinstance(other, self.__class__):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return `true` when self and other are not equal, false otherwise."""
        return not self == other


class Resources():
    """
    List of resources.

    :attr int offset: (optional) Offset value for this portion of the resource list.
    :attr int limit: (optional) Limit value specified or defaulted in the
          list_resources request.
    :attr list[Resource] resources: (optional) A list of resources.
    """

    def __init__(self, *, offset=None, limit=None, resources=None):
        """
        Initialize a Resources object.

        :param int offset: (optional) Offset value for this portion of the resource
               list.
        :param int limit: (optional) Limit value specified or defaulted in the
               list_resources request.
        :param list[Resource] resources: (optional) A list of resources.
        """
        self.offset = offset
        self.limit = limit
        self.resources = resources

    @classmethod
    def _from_dict(cls, _dict):
        """Initialize a Resources object from a json dictionary."""
        args = {}
        valid_keys = ['offset', 'limit', 'resources']
        bad_keys = set(_dict.keys()) - set(valid_keys)
        if bad_keys:
            raise ValueError('Unrecognized keys detected in dictionary for class Resources: ' + ', '.join(bad_keys))
        if 'offset' in _dict:
            args['offset'] = _dict.get('offset')
        if 'limit' in _dict:
            args['limit'] = _dict.get('limit')
        if 'resources' in _dict:
            args['resources'] = [Resource._from_dict(x) for x in (_dict.get('resources') )]
        return cls(**args)

    def _to_dict(self):
        """Return a json dictionary representing this model."""
        _dict = {}
        if hasattr(self, 'offset') and self.offset is not None:
            _dict['offset'] = self.offset
        if hasattr(self, 'limit') and self.limit is not None:
            _dict['limit'] = self.limit
        if hasattr(self, 'resources') and self.resources is not None:
            _dict['resources'] = [x._to_dict() for x in self.resources]
        return _dict

    def __str__(self):
        """Return a `str` version of this Resources object."""
        return json.dumps(self._to_dict(), indent=2)

    def __eq__(self, other):
        """Return `true` when self and other are equal, false otherwise."""
        if not isinstance(other, self.__class__):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Return `true` when self and other are not equal, false otherwise."""
        return not self == other


